Conditional Statement
  - 특정 조건이 참인지 거짓인지에 따라 실행 결과가 달라지도록 제어하는 문장이다.
  
● if 조건문
  if (condition) {
    ... code ...
  }
  - condition은 boolean 값을 가져야 한다. 즉, true or false를 결과로 가져야 한다.
  - condition이 true일 때 code가 실행된다.
  
● if ... else 조건문
  if (condition) {
    ... code1 ...
  } else {
    ... code2 ...
  }
  - condition이 true일 때 code1을 실행하고 code2는 무시한 채 다음 코드로 넘어간다.
  - condition이 false일 때 code2를 실행한다.
  
● if ... else if ... else 조건문
  if (condition1) {
    ... code1 ...
  } else if (condition2) {
    ... code2 ...
  } else if (condition3) {
    ... code3 ...
  }
        .
        .
        .        
   else {
    ... code0 ...
  }
  - condition1이 true일 때 code1을 실행한다.
  - condition1이 false이고 condition2가 true일 때 code2를 실행한다.
  - condition1, condition2가 false이고 condition3가 true일 때 code3를 실행한다.
                        .
                        .
                        .        
  - 앞의 모든 조건들이 false일 때 code0을 실행한다.  

● switch 조건문
  - 조건문의 범위를 지정할 수 없을 때 사용한다.
  switch(data) {
    case 1: code1; break;
    case 2: code2; break;
    case 3: code3;
    case 4: code4; break;
    case 5: code5; break;
            .
            .
           .        
    default: code0;
  }
  - 괄호 안의 data에 들어갈 수 있는 자료형은 int보다 작거나 같은 자료형(char, byte, short, int, boolean) 또는 String이 들어갈 수 있다.
  - break;는 해당 조건문을 종료하는 것으로, switch문은 break;를 찾을 때까지 계속 실행된다.
  - 위 코드에서 case 3인 경우에는, case 4의 조건과 관계 없이 code3, code4에서 break;를 찾을 때까지 모두 실행된다.
  - 어떤 case에도 해당하지 않는 경우에는 default의 code0을 실행한다.
