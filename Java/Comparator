Comparator
  - List에 저장된 객체들을 일정한 기준에 따라 정렬하기 위해 사용하는 객체이다.
  - Collections.sort(List, Comparator) 메소드는, Comparator 객체에서 정해진 정렬 기준에 따라 List 객체의 내부 데이터들을 정렬한다.
  - 정렬 기준을 만들 때는, Comparator를 상속하는 클래스를 만들고, 해당 클래스의 메소드로 compare을 오버라이딩하여 사용한다.
  - compare(s1, s2)은 음수, 양수 혹은 0을 반환하도록 하고, 이를 통해 s1, s2의 대소관계를 비교하여 Collections.sort()로 전달하면 sort에 의해 정렬된 데이터가 반환된다.

◎ 숫자 데이터를 기준으로 오름차순 정렬
public class ClassA {
  // List 객체의 인스턴스로 members 객체를 만들고, 여기에 salary 데이터를 가져올 수 있는 getSalary()가 작성된 코드가 있다고 가정하자.

  Collections.sort(members, new AscendedBySalary());
  // 두 번째 인자로 AscendedBySalary 객체를 만들면 이를 기준으로 첫 번째 인자로 전달된 members가 정렬된다.
  
  class AscendedBySalary implements Comparator {
    public int compare(s1, s2) {
      return (s1.getSalary() < s2.getSalary()) ? -1 : (s1.getSalary() > s2.getSalary()) ? 1 : 0 ;
      // s1.getSalary()가 s2.getSalary()보다 작으면 음수, 크면 양수, 같으면 0을 반환하는 메소드를 sort 메소드에 기준으로 전달한다.
    }
  }
}

◎ 문자열 데이터를 기준으로 오름차순 정렬
public class ClassA {
  // List 객체의 인스턴스로 members 객체를 만들고, 여기에 name 데이터를 가져올 수 있는 getName()이 작성된 코드가 있다고 가정하자.

  Collections.sort(members, new AscendedByName());
  // 두 번째 인자로 AscendedByName 객체를 만들면 이를 기준으로 첫 번째 인자로 전달된 members가 정렬된다.
  
  class AscendedByName implements Comparator {
    public int compare(s1, s2) {
      return s1.getName().compareToIgnoreCase(s2.getName());
      // 대소문자 구분 없이 s1과 s2를 사전식으로 비교하여 s1이 앞에 있으면 음수, 뒤에 있으면 양수를 반환하는 메소드를 sort 메소드에 기준으로 전달한다.
      // 대소문자를 구분할 때는 compareTo() 메소드를 이용한다.
    }
  }
}
