Exception
  - 프로그램 상으로 제어가 가능한 에러를 예외라고 한다.
  - 컴파일 후, 프로그램 실행 과정에서 발생하는 오류를 런타임 에러라고 한다.
  - Exception도 클래스이며, 모든 에러는 Exception 클래스를 상속받는다.
  - 예외를 처리하기 위한 방법이 존재하며, 사용자가 예외를 정의할 수도 있다.

● try { Statement1 } catch( Exception1 ) { Statement2 } catch( Exception2 ) { Statement3 } ... finally { Statement4 }
  - try의 실행문인 Statement1에 예외가 발생할 가능성이 있는 코드를 입력하고, Exception1, 2, ...에 발생하는 에러 종류를 확인하여 객체를 생선한 뒤, 예외 발생시 실행될 코드를 Statement2, 3 ... 에 입력한다.
  - finally의 실행문인 Statement4에는 예외 발생 여부와 관계없이 실행될 코드를 입력한다.
  
◎ 예시
  try {
    int divide(int a, int b) {
      return a / b;
    }
  } catch(ArithmeticException arithE) {
    arithE.printStackTrace();
    System.out.println(arithE.getMessage());
  } finally {
    System.out.println("end");
  }
  // b에 0이 입력되는 경우, ArithmeticException이 발생하여 catch로 넘어간다.
  // catch에서 printStackTrace() 메소드를 통해 해당 에러가 발생한 곳을 모두 추적하고, 메세지가 발생한다면 getMessage()를 통해 메세지를 전달해 준다.
  // 에러 여부와 관계없이 마지막에는 end가 출력된다.
  // 모든 에러는 Exception을 상속하므로, 모든 에러에 대해 동일하게 대처한다면 catch에 전달하는 에러를 Exception으로 설정하면 편리하다.
  
● throws Exception
  - 어떤 메소드에서 예외가 발생했을 때, 메소드를 호출한 곳으로 예외를 넘길 때 사용한다.
  - 콜백 메소드에서 예외가 발생했다면 메소드를 호출한 곳에서도 throws를 통해 예외를 넘겨야 한다.
  - 최종적으로 메소드가 넘어긴 곳에서 try...catch를 이용해 예외를 처리한다.
  
◎ 예시
  class ClassA {
    ClassA() throws ArithmeticException {
      method1();  
    }
    void method1(int a, int b) throws ArithmeticException {
        method2(a, b);
    }
    int method2(int a, int b) throws ArithmeticException {
      return a / b;
    }
  }
  
  public static void main(String[] args) throws ArithmeticException {
    try {
      new ClassA();
    } catch (ArithmeticException arithE) {
      arithE.printStackTrace();
      System.out.println(arithE.getMessage());
    }
  }
  
● User Exception
  - Exception 클래스를 상속하면 사용자 정의 예외를 만들 수 있다.
  - 사용자 정의 예외 클래스의 생성자 메소드의 내용을 super(message)로 지정하면, 부모 클래스인 Exception에 message를 전달하고, Exception에서 이를 매개변수로 하는 생성자 메소드를 실행하게 된다.
  - 예외로 만들고 싶은 상황에서 throw new UserException()을 실행하면 사용자가 정의한 UserException 클래스를 통해 Exception 클래스로 에러가 넘어간다.

● ArithmeticException
  - 어떤 수를 0으로 나누었을 때 발생하는 에러이다.
  
● InputMismatchException
  - 주어진 메소드에 정해진 데이터형 이외의 데이터가 매개변수로 전달되었을 때 발생하는 에러이다.
