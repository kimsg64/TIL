Manipulate Data
  
  1. 자바 가상 머신(JVM)에 JDBC 드라이버(OJDBC의 OracleDriver.class)를 로드한다.
    - Class.forName("oracle.jdbc.driver.OracleDriver");
    
  2. Oracle DB에 연결하기 위해 변수를 준비한다.
    - 서버의 URL을 "jdbc:oracle:thin:@주소:포트:SID" 형태로 String 변수에 할당한다. @ 이전의 문자열은 사용하는 DB의 종류에 따라 달라질 수 있다.
    - DriverManager 클래스의 getConnection(serverUrl, userID, userPW) 메소드로 Java.sql 패키지의 Connection 클래스를 반환받아 변수에 할당한다.
    - SQL문을 작성하여 String 변수에 할당한다. 이 때, SQL문에서 값이 변하는 부분은 "?"로 작성해 두면, PreparedStatement 객체의 메소드를 이용하여 변수처럼 활용할 수 있다.

  3. String을 쿼리문으로 실행시켜 주는 PreparedStatement 객체를 생성한다.
    - Connection 클래스의 prepareStatement(sql) 메소드를 이용하여 PreparedStatement 객체를 반환받는다.
    - PreparedStatement 클래스의 setInt(number, int), setString(number, String) 등의 메소드를 이용하여, SQL문의 number번째 "?"에 들어갈 값을 지정할 수 있다.
    
  4. SQL문을 실행한다.
    - insert, update, delete문에는 executeUpdate 메소드를 이용하며, 삽입, 업데이트, 삭제된 레코드의 개수를 int로 반환받을 수 있다.
    - select문에는 executeQuery 메소드를 이용하며 ResultSet 객체에 select문의 결과 정보가 저장된다. 이는 ResultSet의 메소드인 getInt(n), getString(n), getDouble(n) 등을 이용하여 n번째에 해당하는 int, String, double 등의 자료를 반환받을 수 있다.
    - next() 메소드는 ResultSet 객체에 다음 데이터가 존재하는지를 확인하여 true나 fasle를 반환하므로, 이를 이용해 데이터를 필요한 만큼 체크할 수 있다.
    - 이후 만든 순서의 역순(Connection, PreparedStatement, ResultSet 순서)으로 close()를 사용하여 자원을 정리한다.

  5. 트랜잭션
    - 트랜잭션이 발생하는 경우에는 자동으로 커밋이 되도록 설정되어 있으므로, 커밋과 롤백을 이용하기 위해서는 Connection 객체의 setAutoCommit(boolean) 메소드에 false를 전달하여 자동 커밋을 해제해야 한다.
    - 작업이 수행되는 일련의 과정에서, Connection 객체의 commit() 메소드와 rollback() 메소드를 이용하여 트랜잭션 단위로 에러를 고려하면서 데이터를 관리할 수 있다.
