Inner Class
  - 클래스의 내부에서 새로운 클래스를 정의하는 것이다.
  - 내부 클래스가 선언되는 클래스를 외부 클래스라고 한다.

● Instance Class
  - 외부 클래스의 멤버 영역에서 선언되는 내부 클래스이다.
  - 선언 방식은 일반적인 클래스의 선언 방식과 같으나, 선언되는 장소가 외부 클래스 내부이다.
  - Outer.class, Outer$Inner.class 형태로 두 개의 클래스가 컴파일된다.
  - 외부 클래스의 멤버 변수나 메소드를 사용할 수 있으나, 외부 클래스에서 내부 클래스의 데이터를 사용하려면 내부 클래스의 인스턴스를 먼저 생성해야 한다.
  - 다른 클래스의 내부 클래스를 이용하려면 먼저 다른 클래스의 인스턴스를 생성한 후 내부 클래스의 인스턴스를 생성해야 한다. 

◎ 예시
  ClassA {
    int a = 1;
    ClassAInner{
      a++;
      // 외부 클래스의 a를 사용했으므로 a = 2가 된다.
    }
  }
  
  ClassB {
    new ClassA().new ClassAInner();
    a++;
    // ClassA의 인스턴스를 먼저 생성한 뒤 ClassAInner의 인스턴스를 생성하고 a++을 하면 a = 3이 된다.
  }

● Local Class
  - 외부 클래스의 메소드나 Constructor에서 선언되는 내부 클래스이다.
  - 선언 방식은 일반적인 클래스의 선언 방식과 같으나, 선언되는 장소가 외부 클래스의 메소드 내부이다.
  - Outer.class, Outer$1Inner.class 형태로, 내부 클래스에 넘버링이 된 두 개의 클래스가 컴파일된다.

● Anonymous Class
  - 클래스의 선언과 동시에 객체를 생성하는 일회성 내부 클래스이다.
  - 클래스명이 존재하지 않으므로 변수를 만들 수 없다.
  - Outer.class, Outer$1.class 형태로, 외부 클래스에 $과 번호가 붙은 클래스가 추가적으로 컴파일된다.
  
◎ 예시
  ClassA {
    void hello() {
      System.out.println("hello");
    }
  }
  
  ClassB {
    new ClassA {  
      String greeting = "hi";
      void hello() {
        System.out.println(greeting);
      }
    }.hello();
  }
  // ClassA의 인스턴스를 만들고 동시에 익명 클래스를 만들고 메소드를 오버라이딩하여 사용할 수 있다.
