Data Manipulation Language(DML)
  - 데이터 조작 언어는 스키마 객체의 데이터를 입력, 수정, 조회, 삭제한다.
  - insert, delete, update를 통해 데이터베이스를 수정하는 작업의 단위를 트랜잭션(transaction)이라고 한다.
  - 트랜잭션을 데이터베이스에 반영하기 위해서는 commit 명령이 필요하며, commit 되지 않은 작업은 rollback 명령을 통해 실행 취소가 가능하다.
  - cmd 환경에서는 quit 명령으로 종료하면 트랜잭션이 자동으로 commit되고, 강제로 종료하면 자동으로 rollback된다.
  
● insert
  - 데이터베이스에 레코드를 추가한다.
  - insert into table(field1, field2, ...) values(value1, value2, ...) 형태로 실행한다.
  - 모든 필드값을 추가하는 경우에는 필드명을 생략하고 insert into values(value1, value2, ...) 형태로 입력이 가능
  - 필드값을 추가할 때는 해당 필드에서 요구하는 데이터 타입에 맞게 value를 전달해야 하는데, 이는 desc field로 확인할 수 있다.
  - desc field로 반환되는 데이터 타입은 NUMBER(n, m), VARCHAR2(n), DATE 등이 있다.
  - NUMBER(n, m): 정수 부분이 n자리, 실수 부분이 m자리인 숫자 데이터
  - VARCHAR2(n): 길이가 n인 문자열 데이터
  - DATE: 날짜 데이터
  
● delete
  - 데이터베이스의 데이터를 삭제한다.
  - delete from table where field='' 형태로, 원하는 테이블의 필드 중 조건에 부합하는 필드를 삭제할 수 있다.
  
● update
  - 데이터베이스의 데이터를 수정한다.
  - update table set field=changed 형태로, 원하는 테이블의 필드의 값을 수정할 수 있다.
  
● select
  - 데이터베이스에서 데이터를 검색한다.
  ◎ 예시
    select * from table;
    // "table" 테이블의 모든 데이터를 선택한다.

    select NAME, AGE from MEMBERS;
    // "MEMBERS" 테이블에서 NAME 필드와 AGE 필드를 선택한다.

    select * from tab;
    // 모든 테이블의 모든 데이터를 선택한다.

    select tname from tab;
    // 모든 테이블의 테이블명을 선택한다.

    select name "이름" from table;
    select name 이름 from table;
    select name as "이름" from table;
    select name as 이름 from table;
    // "table" 테이블의 "name" 필드의 값들을 보여주되, 필드명 "name"은 "이름"으로 치환하여 표시해 준다.

    select salary+100 from table;
    // salary 필드의 모든 값에 각각 100을 더한 결과를 표시해 준다.
  
● Where
  - 조건문을 만들 때 사용한다.
  - =: 좌항과 우항의 값이 같다.
  - !=, <>: 좌항과 우항의 값이 다르다.
  - in (list): list의 요소 중 하나라도 같은 값이 있는 요소를 반환한다.
  - not in (list): list의 요소가 하나도 없는 요소를 반환한다.
  - between A and B: A와 B 사이에 속하는 모든 요소를 반환한다. 이 때, A, B도 포함한다.
  - not between A and B: A와 B 사이에 속하지 않는 모든 요소를 반환한다.
  - like: 문자의 일부가 일치하는 모든 요소를 반환한다.
  - not like: 문자의 일부와 일치하지 않는 모든 요소를 반환한다.
  - is null: field 값이 null인 모든 요소를 반환한다. (null은 일반 연산자로 연산할 수 없다.)
  - is not null: field 값이 null이 아닌 모든 요소를 반환한다.
  - order by field asc: field를 기준으로 데이터를 오름차순으로 정렬하여 반환한다.
  - order by field desc: field를 기준으로 데이터를 내림차순으로 정렬하여 반환한다.
  
● NVL(field, value)
  - 해당 field의 값이 null인 모든 요소의 값을 value로 변경한다.

● ||
  - 문자와 문자, 문자와 필드를 연결한다.
  
● distinct
  - field명 왼쪽에 입력하면 중복을 제거하여 반환한다.
  - 단, 필드는 하나만 입력할 수 있다.
  
● alias
  - 특정 필드에 설정하면 실제 데이터 대신 설정된 별명을 표시해 준다.  

◎ 예시
  select * from table where job='PROGRAMMER';
  // "table" 테이블에서 job의 값이 PROGRAMMER인 모든 요소를 찾아 반환한다. 이 때, 문자열은 작은따옴표('')로 표시한다.

  select * from table where job in ('PROGRAMMER', 'ANALYST');
  // "table" 테이블에서 job의 값이 PROGRAMMER 혹은 ANALYST인 요소를 모두 찾아 반환한다.

  select * from table where salary between 2000 and 3000;
  // "table" 테이블에서 salary의 값이 2000 이상 3000 이하인 요소를 모두 찾아 반환한다.

  select * from table where name like '%a';
  // name의 전체 문자의 길이와 무관하게 마지막 글자가 a로 끝나는 요소를 모두 찾아 반환한다.

  select * from table where name not like '_a%';
  // name의 두 번째 문자가 a이고, a 앞의 글자는 한 글자인 모든 요소 제외한 나머지 요소들을 반환한다.

  select * from table where name not like '__a__';
  // name의 길이가 5자이고, 세 번째 글자가 a인 모든 요소들을 반환한다.

● dual
  - 실제하지 않는 값을 출력할 때 테이블 자리에 쓴다.
  
● abs(n)
  - n의 절대값(Absolute)을 구한다.
  
● ceil(n)
  - n을 올림한다.

● floor(n)
  - n을 내림한다.

● mod(m, n)
  - m을 n으로 나눈 나머지를 반환한다.

● power(m, n)
  - m의 n승을 구한다.

● round(m, n)
  - m을 반올림한다.
  - n을 전달하는 경우에는 소수점 n번째 자리까지 반올림하며 음수일 경우 정수 n번째 자리까지 반올림한다.

● trunc(m, n)
  - m의 소수점 이하를 버림한다. 
  - n을 전달할 경우 양수면 소수점 이하 n번째 자리까지, 음수면 정수 n번째 자리까지 버림한다.

● concat(stringA, stringB)
  - 문자열 A, B를 결합한다.

● initcap(string)
  - 주어진 문자열의 모든 단어의 첫 문자를 대문자로 변경한다.
  
● lower(string)
  - 주어진 문자열을 모두 소문자로 변경한다.

● upper(string)
  - 주어진 문자열을 모두 대문자로 변경한다.

● lpad(string, n, char)
  - 문자열의 왼쪽을 char로 채워서 길이를 n으로 만든다.

● rpad(string, n, char)
  - 문자열의 오른쪽을 char로 채워서 길이를 n으로 만든다.

● replace(stringA, stringB, stringC)
  - 문자열 A에서 모든 B를 C로 치환한다.

● substr(string, m, n)
  - 문자열의 m번째 자리부터 n개의 문자열을 잘라서 반환하며, m이 음수인 경우 뒤에서 m번째부터 시작하여 n개를 반환한다.

● length(string)
  - 문자열의 길이를 반환한다.

● instr(string, char, m, n)
  - 특정 문자의 첫 번째 위치를 반환하며, 없는 경우 0을 반환한다.
  - m을 전달할 경우 m번째 이후부터 검색한다.
  - n을 전달할 경우 m을 포함하여 m부터 시작하여 n번째 char의 위치를 반환한다.

● trim(string, from field)
  - 필드 값의 양 가장자리에 특정 string이 있다면 모두 제거한 값을 반환한다.
  
● ltrim(stringA, stringB)
  - 문자열 A의 왼쪽 가장자리에 문자열 B에 해당하는 값이 있다면 이를 모두 제거한 값을 반환한다.
  
● rtrim(stringA, stringB)
  - 문자열 A의 오른쪽 가장자리에 문자열 B에 해당하는 값이 있다면 이를 모두 제거한 값을 반환한다.
  
● decode(field, value1, replacement1, value2, replcaement2, ...)
  - 해당 필드에서 각 value의 값을 해당 replacement의 값으로 바꾼 값을 반환한다.
  
● sysdate
  - 현재 날짜 정보를 가지고 있는 내장된 field이다.

● to_char(date, pattern)
  - 첫 번째 매개변수로 받은 날짜 정보를 pattern에 따라 문자 데이터로 변경하여 반환한다.

● to_date(string, pattern)
  - pattern을 기준으로 첫 번째 매개변수로 받은 문자 데이터를 읽어 날짜 데이터로 변경하여 반환한다.

● last_dat(date)
  - 주어진 날짜와 데이터와 같은 월의 마지막 날을 반환한다.

● add_months(dateA, numberB)
  - A를 기준으로 B개월 이후의 날짜를 반환한다.
  
● months_between(dateA, dateB)
  - A와 B 사이의 기간을 개월 수로 반환한다.

● round(date, unit)
  - 전달한 날짜를 해당 단위까지 반올림한다.
  - 이를테면 YEAR을 전달하면 전달한 날짜가 7월 이상인 경우에는 전달한 날짜의 연도에서 1을 더하고, 6월 이하인 경우에는 전달한 날짜와 같은 연도를 반환한다.
  
● count(field)
  - 해당 필드의 데이터 수를 반환한다.
  - null은 제외하며, 중복되는 값도 카운팅한다.
  
● max(field)
  - 해당 필드의 최댓값을 반환한다.

● min(field)
  - 해당 필드의 최솟값을 반환한다.
  
● sum(field)
  - 해당 필드의 합계를 반환한다.

● avg(field)
  - 해당 필드의 평균을 반환한다.

● stddev(field)
  - 해당 필드의 표준편차를 반환한다.
  
● group by field
  - 해당 필드를 기준으로 테이블을 그룹화한다.
  - group by field를 이용하면 해당 필드는 그룹 함수가 적용된 필드와 함께 select할 수 있게 된다.
  
● having
  - group by에 대한 조건문을 만들 때 사용한다.

● rollup(field)
  - group by 절에 작성하면 마지막 레코드로 필드별 레코드의 합계를 구해 준다.
  
● cube(field1, field2)
  - group by 절에 작성하면 field1의 내용에 따라 레코드를 나누고, 이를 다시 field2를 기준으로 나누어 레코드의 합계를 구해 준다.

● grouping(field)
  - rollup 혹은 cube로 합계를 구한 그룹의 데이터는 1로, 그렇지 않은 데이터는 0으로 표시해 준다.

● merge into table1 using (table2) on (condition) when matched then update set code when not matched then insert () values()
  - condition에 부합한다면, table2를 이용해 table1을 update하고, 부합하지 않는다면 table2를 이용해 table1을 insert한다.

● case field when condition1 then code1 when condition2 then code2... end as alias
  - 해당 필드가 조건 1에 부합한다면 코드 1을, 조건 2에 부합한다면 코드 2를, ... 고른다.

● nullif(A, B)
  - A, B의 값이 같다면 Null, 같지 않다면 A를 반환한다.

● coalesce(A, B, C, ...)
  - A가 Null이 아니면 A를, Null이면 B, C, ...를 반환한다.

● join ... on
  - select fieldA, fieldB from tableA join tableB on tableA.common=tableB.common 형태로 사용한다.
  - tableA에 속하는 fieldA와 tableB에 속하는 fieldB를, 두 테이블이 공통으로 가진 common field로 연결하여 동시에 선택한다.
  - select fieldA, fieldB from tableA, tableB where tableA.common=tableB.common 형태로 사용하기도 하나, 위의 방식이 더 권장된다.
